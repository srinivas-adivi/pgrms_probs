import lib
import constants


def problem20(n):
    """    
    >>> problem20(100)
    648
    """
    value = lib.factorial(n)
    return sum(lib.digits(value))

def problem21(m, n):
    """
    >>> problem21(2, 10000)
    31626
    """
    return sum([i for i in range(m, n) if lib.is_amicable(i)])

def problem22(filename):
    """
    >>> problem22('problem22.txt')
    871198282
    """
    text = open(filename).read()
    names = text.split(',')
    names.sort()
    names_index = range(len(names))
    return sum([(i+1) * sum([constants.alphabets.index(letter)+1\
                            for letter in names[i].strip('"')])\
                                for i in names_index])

def problem25(n):
    """
    >>> problem25(1000)
    4782
    """
    fib_nums = [1, 1]
    next_fib = fib_nums[-1]+fib_nums[-2]
    while len(str(next_fib)) < n:
        fib_nums.append(next_fib)
        next_fib = fib_nums[-1] + fib_nums[-2]
    return len(fib_nums)+1
     
def problem28(n):
    """ return sum of both diagonals in n by n spiral
    >>> problem28(1001)
    669171001
    >>> problem28(5)
    101
    >>> problem28(3)
    25
    """
    mod = n%2
    result = sum(map(lib.sum_conners_N_spiral, range(mod, n+1, 2)))
    return result

def problem29(a, b):
    """ return no.of distinct terms in the sequence generated by a power b for 
        2 <= a <= 100 and 2 <= b <= 100?
    >>> problem29(2, 101)
    9183
    """
    L = range(a, b)
    result = len(set([lib.power(x, y) for x in L for y in L]))
    return result


if __name__ == "__main__":
    import doctest
    doctest.testmod()
